<style>
    .chat-fab {
        position: fixed;
        bottom: 25px;
        right: 25px;
        background-color: var(--primary-color);
        color: white;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 28px;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        z-index: 1040;
        transition: all 0.3s ease;
    }

        .chat-fab:hover {
            transform: scale(1.1);
            background-color: var(--primary-dark);
        }

    .chat-window {
        position: fixed;
        bottom: 100px;
        right: 25px;
        width: 350px;
        max-width: 90vw;
        height: 500px;
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.2);
        display: none; /* Başlangıçta gizli */
        flex-direction: column;
        z-index: 1039;
        overflow: hidden;
    }

        .chat-window.show {
            display: flex;
        }

    .chat-header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem;
        font-weight: bold;
        border-radius: 15px 15px 0 0;
    }

    .chat-body {
        flex-grow: 1;
        padding: 1rem;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .chat-message {
        padding: 0.6rem 1rem;
        border-radius: 20px;
        max-width: 80%;
        line-height: 1.4;
    }

        .chat-message.user {
            background-color: #e9e9eb;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .chat-message.bot {
            background-color: var(--primary-light);
            color: white;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

            .chat-message.bot.typing {
                font-style: italic;
                color: #ccc;
                background-color: #f1f1f1;
            }

    .chat-footer {
        padding: 0.5rem 1rem;
        border-top: 1px solid #eee;
    }

        .chat-footer form {
            display: flex;
            gap: 0.5rem;
        }

        .chat-footer input {
            flex-grow: 1;
            border-radius: 20px !important;
            border: 1px solid #ddd;
            padding: 0.5rem 1rem;
        }

        .chat-footer button {
            border-radius: 50% !important;
            width: 40px;
            height: 40px;
        }
</style>

<div class="chat-fab" id="chatFab">
    <i class="fas fa-robot"></i>
</div>

<div class="chat-window animate__animated animate__fadeInUp" id="chatWindow">
    <div class="chat-header">
        Alışveriş Asistanı
    </div>
    <div class="chat-body" id="chatBody">
        <div class="chat-message bot">Merhaba! Size nasıl yardımcı olabilirim? Ürünlerimiz hakkında soru sorabilirsiniz.</div>
    </div>
    <div class="chat-footer">
        <form id="chatForm">
            <input type="text" id="chatInput" placeholder="Mesajınızı yazın..." autocomplete="off" required>
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i>
            </button>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const chatFab = document.getElementById('chatFab');
        const chatWindow = document.getElementById('chatWindow');
        const chatForm = document.getElementById('chatForm');
        const chatInput = document.getElementById('chatInput');
        const chatBody = document.getElementById('chatBody');

        if (!chatFab) return; // Component'in yüklendiğinden emin ol

        // Sohbet penceresini aç/kapat
        chatFab.addEventListener('click', () => {
            chatWindow.classList.toggle('show');
            if (chatWindow.classList.contains('show')) {
                chatInput.focus();
            }
        });

        // Form gönderildiğinde
        chatForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userMessage = chatInput.value.trim();
            if (!userMessage) return;

            addMessageToUI(userMessage, 'user');
            chatInput.value = '';

            showTypingIndicator();

            try {
                const response = await fetch('/api/chat/sendmessage', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: userMessage })
                });

                removeTypingIndicator();

                if (!response.ok) {
                    addMessageToUI('Üzgünüm, bir hata oluştu. Lütfen daha sonra tekrar deneyin.', 'bot');
                    return;
                }

                const data = await response.json();
                addMessageToUI(data.reply, 'bot'); // Burası değişmedi, asıl değişiklik addMessageToUI içinde

            } catch (error) {
                removeTypingIndicator();
                addMessageToUI('Bağlantı hatası. İnternetinizi kontrol edip tekrar deneyin.', 'bot');
                console.error('Chat error:', error);
            }
        });

        // addMessageToUI fonksiyonu güncellendi
        function addMessageToUI(message, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', sender);

            // Eğer gönderici bot ise ve mesaj HTML içerebilir, innerHTML kullan
            if (sender === 'bot') {
                // Güvenli bir şekilde HTML içeriği eklemek için, sadece belirli etiketlere izin verilebilir.
                // Şimdilik, sadece linkleri (<a>) desteklemek için bir regex kullanacağız.
                // Eğer Gemini'den başka HTML etiketleri (örn: <b>, <i>, <ul>) geliyorsa, bu regex'i veya
                // bir DOMPurify gibi kütüphaneyi genişletmeniz gerekebilir.

                // Linkleri tıklanabilir hale getir
                let processedMessage = message.replace(
                    /(URL:\s*)([^\s]+)/g, // "URL: /product/abc" gibi desenleri bulur
                    `<a href="$2" target="_blank" style="color: white; text-decoration: underline;">$2</a>`
                );

                // Eğer ürün detayında link olarak dönmüyorsa ama AI kendisi link oluşturuyorsa diye genel http/https linklerini de yakalayalım.
                processedMessage = processedMessage.replace(
                    /(https?:\/\/[^\s]+)/g,
                    `<a href="$1" target="_blank" style="color: white; text-decoration: underline;">$1</a>`
                );

                messageElement.innerHTML = processedMessage;
            } else {
                // Kullanıcı mesajları her zaman düz metin olmalı
                messageElement.textContent = message;
            }

            chatBody.appendChild(messageElement);
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function showTypingIndicator() {
            const typingElement = document.createElement('div');
            typingElement.id = 'typingIndicator';
            typingElement.classList.add('chat-message', 'bot', 'typing');
            typingElement.textContent = 'Yazıyor...';
            chatBody.appendChild(typingElement);
            chatBody.scrollTop = chatBody.ScrollHeight;
        }

        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }
    });
</script>