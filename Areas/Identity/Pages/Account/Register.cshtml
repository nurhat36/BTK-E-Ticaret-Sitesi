@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white">
                    <h1 class="h3 mb-0">@ViewData["Title"]</h1>
                </div>
                <div class="card-body p-5">
                    <div class="row">
                        <div class="col-md-6">
                            <h2 class="h4 mb-4">Create your account</h2>
                            <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" enctype="multipart/form-data">
                                <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                                <div class="mb-3">
                                    <label asp-for="Input.UserName" class="form-label">Username</label>
                                    <input asp-for="Input.UserName" class="form-control form-control-lg" autocomplete="username" aria-required="true" placeholder="Enter username" />
                                    <span asp-validation-for="Input.UserName" class="text-danger small"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Input.Email" class="form-label">Email address</label>
                                    <input asp-for="Input.Email" class="form-control form-control-lg" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                                    <span asp-validation-for="Input.Email" class="text-danger small"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Input.Password" class="form-label">Password</label>
                                    <input asp-for="Input.Password" class="form-control form-control-lg"
                                           autocomplete="new-password"
                                           aria-required="true"
                                           placeholder="Create password"
                                           id="passwordInput" />
                                    <div id="passwordStrength" class="mt-2">
                                        <div class="progress" style="height: 5px;">
                                            <div id="passwordStrengthBar" class="progress-bar" role="progressbar"></div>
                                        </div>
                                        <small id="passwordHelp" class="form-text text-muted"></small>
                                        <ul id="passwordCriteria" class="list-unstyled small mt-2">
                                            <li id="length" class="text-danger"><i class="bi bi-x-circle-fill"></i> At least 8 characters</li>
                                            <li id="uppercase" class="text-danger"><i class="bi bi-x-circle-fill"></i> At least one uppercase letter</li>
                                            <li id="lowercase" class="text-danger"><i class="bi bi-x-circle-fill"></i> At least one lowercase letter</li>
                                            <li id="number" class="text-danger"><i class="bi bi-x-circle-fill"></i> At least one number</li>
                                            <li id="special" class="text-danger"><i class="bi bi-x-circle-fill"></i> At least one special character</li>
                                        </ul>
                                    </div>
                                    <span asp-validation-for="Input.Password" class="text-danger small"></span>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="Input.ConfirmPassword" class="form-label">Confirm Password</label>
                                    <input asp-for="Input.ConfirmPassword" class="form-control form-control-lg" autocomplete="new-password" aria-required="true" placeholder="Confirm password" />
                                    <span asp-validation-for="Input.ConfirmPassword" class="text-danger small"></span>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="Input.ProfileImage" class="form-label">Profile Image</label>
                                    <input asp-for="Input.ProfileImage" type="file" class="form-control form-control-lg" />
                                    <div class="form-text">Upload a profile picture (optional)</div>
                                    <span asp-validation-for="Input.ProfileImage" class="text-danger small"></span>
                                </div>

                                <button id="registerSubmit" type="submit" class="w-100 btn btn-primary btn-lg rounded-pill">
                                    <i class="bi bi-person-plus me-2"></i>Register
                                </button>
                            </form>
                        </div>

                        <div class="col-md-6 d-flex align-items-center">
                            <div class="text-center p-4">
                                <div class="mb-4">
                                    <img src="https://via.placeholder.com/200" alt="Registration illustration" class="img-fluid" style="max-height: 200px;">
                                </div>
                                <h3 class="h5 mb-3">Sign up with social media</h3>

                                @if ((Model.ExternalLogins?.Count ?? 0) == 0)
                                {
                                    <div class="alert alert-info">
                                        <p class="mb-0">
                                            No external authentication services configured. See this
                                            <a href="https://go.microsoft.com/fwlink/?LinkID=532715" class="alert-link">
                                                article about setting up external authentication
                                            </a>.
                                        </p>
                                    </div>
                                }
                                else
                                {
                                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                                        <div class="d-grid gap-2">
                                            @foreach (var provider in Model.ExternalLogins!)
                                            {
                                                <button type="submit" class="btn btn-outline-primary rounded-pill" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                                                    <i class="bi bi-@provider.DisplayName.ToLower() me-2"></i>Continue with @provider.DisplayName
                                                </button>
                                            }
                                        </div>
                                    </form>
                                }

                                <div class="mt-4">
                                    <p class="text-muted">
                                        Already have an account? <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl" class="text-decoration-none">Sign in</a>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            background-color: #f8f9fa;
        }

        .card {
            border-radius: 1rem;
            overflow: hidden;
        }

        .form-control-lg {
            border-radius: 0.5rem;
        }

        .form-label {
            font-weight: 500;
        }

        #passwordStrength {
            margin-top: 0.5rem;
        }

        #passwordCriteria li {
            margin-bottom: 0.3rem;
            transition: all 0.3s ease;
        }

            #passwordCriteria li.valid {
                color: #28a745 !important;
            }

            #passwordCriteria li i {
                margin-right: 5px;
            }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.getElementById('passwordInput');
            const passwordStrengthBar = document.getElementById('passwordStrengthBar');
            const passwordHelp = document.getElementById('passwordHelp');
            const passwordCriteria = {
                length: document.getElementById('length'),
                uppercase: document.getElementById('uppercase'),
                lowercase: document.getElementById('lowercase'),
                number: document.getElementById('number'),
                special: document.getElementById('special')
            };

            passwordInput.addEventListener('input', function () {
                const password = this.value;
                let strength = 0;
                let messages = [];

                // Check password criteria
                const hasMinLength = password.length >= 8;
                const hasUpperCase = /[A-Z]/.test(password);
                const hasLowerCase = /[a-z]/.test(password);
                const hasNumbers = /\d/.test(password);
                const hasSpecial = /[!@@#$%^&*(),.?":{}|<>]/.test(password);

                // Update criteria list
                updateCriterion(passwordCriteria.length, hasMinLength);
                updateCriterion(passwordCriteria.uppercase, hasUpperCase);
                updateCriterion(passwordCriteria.lowercase, hasLowerCase);
                updateCriterion(passwordCriteria.number, hasNumbers);
                updateCriterion(passwordCriteria.special, hasSpecial);

                // Calculate strength
                if (hasMinLength) strength += 20;
                if (hasUpperCase) strength += 20;
                if (hasLowerCase) strength += 20;
                if (hasNumbers) strength += 20;
                if (hasSpecial) strength += 20;

                // Update progress bar
                passwordStrengthBar.style.width = strength + '%';

                // Update color based on strength
                if (strength < 40) {
                    passwordStrengthBar.className = 'progress-bar bg-danger';
                    passwordHelp.textContent = 'Weak password';
                } else if (strength < 80) {
                    passwordStrengthBar.className = 'progress-bar bg-warning';
                    passwordHelp.textContent = 'Moderate password';
                } else {
                    passwordStrengthBar.className = 'progress-bar bg-success';
                    passwordHelp.textContent = 'Strong password';
                }
            });

            function updateCriterion(element, isValid) {
                if (isValid) {
                    element.classList.add('valid');
                    element.classList.remove('text-danger');
                    element.innerHTML = element.innerHTML.replace('bi-x-circle-fill', 'bi-check-circle-fill');
                } else {
                    element.classList.remove('valid');
                    element.classList.add('text-danger');
                    element.innerHTML = element.innerHTML.replace('bi-check-circle-fill', 'bi-x-circle-fill');
                }
            }
        });
    </script>
}